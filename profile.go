// Package profile provides a simple way to manage runtime/pprof
// profiling of your Go application.
package profile

import (
	"io/ioutil"
	"log"
	"os"
	"os/signal"
	"path/filepath"
	"runtime"
	"runtime/pprof"
)

type profileMode int

const (
	// CPUProfile controls if cpu profiling will be enabled.
	modeCPU profileMode = iota

	// MemProfile controls if memory profiling will be enabled.
	modeMem

	// BlockProfile controls if block (contention) profiling will
	// be enabled. It defaults to false.
	modeBlock
)

type profile struct {
	// Quiet suppresses informational messages during profiling.
	Quiet bool

	// NoShutdownHook controls whether the profiling package should
	// hook SIGINT to write profiles cleanly.
	NoShutdownHook bool

	// mode holds the type of profiling that will be made
	mode profileMode

	// MemProfileRate sent the rate for the memory profile
	memProfileRate int

	// path holds the base path where various profiling files are  written.
	// If blank, the base path will be generated by ioutil.TempDir.
	path string

	// closers holds the cleanup functions that run after each profile
	closers []func()
}

// NoShutdownHook controls whether the profiling package should
// hook SIGINT to write profiles cleanly.
// Programs with more sophisticated signal handling should set
// this to true and ensure the Stop() function returned from Start()
// is called during shutdown.
func NoShutdownHook(p *profile) { p.NoShutdownHook = true }

// Quiet suppresses informational messages during profiling.
func Quiet(p *profile) { p.Quiet = true }

// CPUProfile controls if cpu profiling will be enabled. It disables any previous profiling settings.
func CPUProfile(p *profile) { p.mode = modeCPU }

// MemProfile controls if memory profiling will be enabled. It disables any previous profiling settings.
func MemProfile(p *profile) { p.mode = modeMem }

// BlockProfile controls if block (contention) profiling will be enabled. It disables any previous profiling settings.
func BlockProfile(p *profile) { p.mode = modeBlock }

// ProfilePath controls the base path where various profiling
// files are written. If blank, the base path will be generated
// by ioutil.TempDir.
func ProfilePath(path string) func(*profile) {
	return func(p *profile) {
		p.path = path
	}
}

// profilePath returns the path where the output will be dumped. If it is not
// set, a temporary directory will be used
func (p *profile) profilePath() (resolvedPath string, err error) {
	if p := p.path; p != "" {
		return p, os.MkdirAll(p, 0777)
	}

	return ioutil.TempDir("", "profile")
}

// Stop runs the closers defined by the running profile mode
func (p *profile) Stop() {
	for _, c := range p.closers {
		c()
	}
}

func baseProfile() *profile {
	return &profile{memProfileRate: 4096, mode: modeCPU}
}

// Start starts a new profiling session.
// The caller should call the Stop method on the value returned
// to cleanly stop profiling.
func Start(options ...func(*profile)) interface {
	Stop()
} {
	prof := baseProfile()
	for _, option := range options {
		option(prof)
	}

	path, err := prof.profilePath()
	if err != nil {
		log.Fatalf("profile: could not create initial output directory: %v", err)
	}

	if prof.Quiet {
		log.SetOutput(ioutil.Discard)
	}

	switch prof.mode {
	case modeCPU:
		fn := filepath.Join(path, "cpu.pprof")
		f, err := os.Create(fn)
		if err != nil {
			log.Fatalf("profile: could not create cpu profile %q: %v", fn, err)
		}
		log.Printf("profile: cpu profiling enabled, %s", fn)
		pprof.StartCPUProfile(f)
		prof.closers = append(prof.closers, func() {
			pprof.StopCPUProfile()
			f.Close()
		})

	case modeMem:
		fn := filepath.Join(path, "mem.pprof")
		f, err := os.Create(fn)
		if err != nil {
			log.Fatalf("profile: could not create memory profile %q: %v", fn, err)
		}
		old := runtime.MemProfileRate
		runtime.MemProfileRate = prof.memProfileRate
		log.Printf("profile: memory profiling enabled, %s", fn)
		prof.closers = append(prof.closers, func() {
			pprof.Lookup("heap").WriteTo(f, 0)
			f.Close()
			runtime.MemProfileRate = old
		})

	case modeBlock:
		fn := filepath.Join(path, "block.pprof")
		f, err := os.Create(fn)
		if err != nil {
			log.Fatalf("profile: could not create block profile %q: %v", fn, err)
		}
		runtime.SetBlockProfileRate(1)
		log.Printf("profile: block profiling enabled, %s", fn)
		prof.closers = append(prof.closers, func() {
			pprof.Lookup("block").WriteTo(f, 0)
			f.Close()
			runtime.SetBlockProfileRate(0)
		})
	}

	if !prof.NoShutdownHook {
		go func() {
			c := make(chan os.Signal, 1)
			signal.Notify(c, os.Interrupt)
			<-c

			log.Println("profile: caught interrupt, stopping profiles")
			prof.Stop()

			os.Exit(0)
		}()
	}

	return prof
}
